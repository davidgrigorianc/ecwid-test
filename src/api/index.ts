import axios from 'axios';
import type {Product, Category} from "@/types";

const baseURL = import.meta.env.VITE_BASE_URL
const storeID = import.meta.env.VITE_STORE_ID
const token = import.meta.env.VITE_TOKEN

const api = axios.create({
  baseURL: `${baseURL}/${storeID}`,
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  },
});

export const fetchCategories = async (): Promise<Category[]> => {
  try {
    const response = await api.get('/categories');
    return response.data.items;
  } catch {
    throw new Error('Failed to fetch categories');
  }
};

export const fetchProducts = async (filters: Partial<{
  productIds: number[];
  category: string;
  autogeneratedSlug: string;
}> = {}): Promise<Product[]> => {
  try {
    const params = new URLSearchParams();

    if (filters.productIds?.length) {
      params.append('productId', filters.productIds.join(','));
    }
    if (filters.category) {
      params.append('category', filters.category);
    }
    if (filters.autogeneratedSlug) {
      params.append('autogeneratedSlug', filters.autogeneratedSlug);
    }

    const endpoint = `/products${params.toString() ? '?' + params.toString() : ''}`;
    const response = await api.get(endpoint);

    return response.data.items.map((product: Product) => ({
      id: product.id,
      name: product.name,
      autogeneratedSlug: product.autogeneratedSlug,
      price: product.price,
      priceInProductList: product.priceInProductList,
      defaultDisplayedPrice: product.defaultDisplayedPrice,
      defaultDisplayedPriceFormatted: product.defaultDisplayedPriceFormatted,
      imageUrl: product.imageUrl,
      description: product.description,
      options: product.options,
    }));
  } catch {
    throw new Error('Failed to fetch products');
  }
};

export const fetchProduct = async (productId: number): Promise<Product> => {
  try {
    const response = await api.get(`/products/${productId}`);
    const product = response.data;
    return {
      id: product.id,
      name: product.name,
      autogeneratedSlug: product.autogeneratedSlug,
      price: product.price,
      priceInProductList: product.priceInProductList,
      defaultDisplayedPrice: product.defaultDisplayedPrice,
      defaultDisplayedPriceFormatted: product.defaultDisplayedPriceFormatted,
      imageUrl: product.imageUrl,
      description: product.description,
      media: product.media,
      options: product.options
    };
  } catch {
    throw new Error('Failed to fetch product details');
  }
};

export async function fetchCategory(categoryId: number): Promise<Category> {
  const response = await api.get(`/categories/${categoryId}`);
  return response.data;
}
